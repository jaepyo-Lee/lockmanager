# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]
#  pull_request:
#    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      working-directory: ./

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - uses: actions/checkout@v2
    - name: make application.properties
      run: |
        cd src/main/resources
        touch ./application.properties
        echo "${{secrets.LOCKER_MANAGER_APPLICATION}}" > ./application.properties
      shell: bash
#    - name: Setup MySQL
#      uses: samin/mysql-action@v1
#      with:
#        character set server: 'utf8'
#        mysql database: ${{secrets.LOCKER_MANAGER_DATABASE_NAME}}
#        mysql user: ${{secrets.LOCKER_MANAGER_DATABASE_USER}}
#        mysql password: ${{secrets.LOCKER_MANAGER_DATABASE_PASSWORD}}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Docker login
      uses: docker/login-action@v2
      with:
        username: ${{secrets.DOCKER_ID}}
        password: ${{secrets.DOCKER_PASSWORD}}

    - name: Docker build
      run: |
        docker build -t ${{secrets.LOCKER_MANAGER_DOCKER_REPO}} .
        docker push ${{secrets.LOCKER_MANAGER_DOCKER_REPO}}

    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{secrets.LOCKER_MANAGER_HOST}}
        username: ubuntu
        key: ${{secrets.LOCKER_MANAGER_PEMKEY}}
        port: 22
        script: |
          sudo docker stop prod-server
          sudo docker rm prod-server
          sudo docker image rm ${{secrets.LOCKER_MANAGER_DOCKER_REPO}}
          sudo docker pull ${{secrets.LOCKER_MANAGER_DOCKER_REPO}}
          sudo docker run -d -p 80:8080 ${{secrets.LOCKER_MANAGER_DOCKER_REPO}}
