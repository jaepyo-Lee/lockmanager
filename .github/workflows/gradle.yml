# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'


    - name: make application.properties
      run: |
        mkdir ./src/main/resources # resources 폴더 생성
        cd ./src/main/resources # resources 폴더로 이동
        touch ./application.properties # application.yml 생성
        echo "${{ secrets.APPLICATION }}" > ./application.properties # github actions에서 설정한 값을 application.yml 파일에 쓰기
      shell: bash

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew clean build -x test

    - name: docker login
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker build & push
      run: |
        docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{secrets.PROJECT_NAME}} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{secrets.PROJECT_NAME}}

    ## deploy to production
    - name: Deploy to dev
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_HOST }} # EC2 퍼블릭 IPv4 DNS
        username: ${{ secrets.AWS_USERNAME }} # ubuntu
        port: 22
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        script: |
          sudo docker rm -f ${{secrets.DOCKER_USERNAME}}/${{secrets.PROJECT_NAME}}
          sudo docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.PROJECT_NAME}}
          sudo docker pull lockermanager_redis
          
          sudo docker exec -it lockermanager_redis redis-cli
          
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{secrets.PROJECT_NAME}} \
          --name ${{ secrets.PROJECT_NAME }} \
          -e SPRING_DATASOURCE_URL=${{ secrets.DB_URL }} \
          -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
          -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
          -d ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}
